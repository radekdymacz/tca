// Code generated by protoc-gen-go.
// source: joke.proto
// DO NOT EDIT!

/*
Package joke is a generated protocol buffer package.

It is generated from these files:
	joke.proto

It has these top-level messages:
	Request
	Response
	ChuckNorrisJoke
*/
package joke

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	FirstName string `protobuf:"bytes,1,opt,name=firstName" json:"firstName,omitempty"`
	LastName  string `protobuf:"bytes,2,opt,name=lastName" json:"lastName,omitempty"`
	LimitTo   string `protobuf:"bytes,3,opt,name=limitTo" json:"limitTo,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Request) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Request) GetLimitTo() string {
	if m != nil {
		return m.LimitTo
	}
	return ""
}

// Response example { "type": "success", "value": { "id": 181, "joke": "John Doe's OSI network model has only one layer - Physical.", "categories": [“nerdy”] } }
type Response struct {
	Type  string           `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value *ChuckNorrisJoke `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Response) GetValue() *ChuckNorrisJoke {
	if m != nil {
		return m.Value
	}
	return nil
}

type ChuckNorrisJoke struct {
	Id         uint32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Joke       string   `protobuf:"bytes,2,opt,name=joke" json:"joke,omitempty"`
	Categories []string `protobuf:"bytes,3,rep,name=categories" json:"categories,omitempty"`
}

func (m *ChuckNorrisJoke) Reset()                    { *m = ChuckNorrisJoke{} }
func (m *ChuckNorrisJoke) String() string            { return proto.CompactTextString(m) }
func (*ChuckNorrisJoke) ProtoMessage()               {}
func (*ChuckNorrisJoke) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChuckNorrisJoke) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChuckNorrisJoke) GetJoke() string {
	if m != nil {
		return m.Joke
	}
	return ""
}

func (m *ChuckNorrisJoke) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "joke.Request")
	proto.RegisterType((*Response)(nil), "joke.Response")
	proto.RegisterType((*ChuckNorrisJoke)(nil), "joke.ChuckNorrisJoke")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for Joke service

type JokeClient interface {
	ChuckNorris(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type jokeClient struct {
	c           client.Client
	serviceName string
}

func NewJokeClient(serviceName string, c client.Client) JokeClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "joke"
	}
	return &jokeClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *jokeClient) ChuckNorris(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Joke.ChuckNorris", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Joke service

type JokeHandler interface {
	ChuckNorris(context.Context, *Request, *Response) error
}

func RegisterJokeHandler(s server.Server, hdlr JokeHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Joke{hdlr}, opts...))
}

type Joke struct {
	JokeHandler
}

func (h *Joke) ChuckNorris(ctx context.Context, in *Request, out *Response) error {
	return h.JokeHandler.ChuckNorris(ctx, in, out)
}

func init() { proto.RegisterFile("joke.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x6d, 0x12, 0x6d, 0x33, 0xa5, 0x15, 0x06, 0x84, 0x50, 0x44, 0xca, 0x9e, 0x0a, 0x42,
	0x0e, 0x15, 0xfc, 0x03, 0xde, 0x14, 0x7a, 0x58, 0xf4, 0xe8, 0x61, 0x6d, 0x47, 0x5d, 0x93, 0x3a,
	0x71, 0x77, 0x23, 0xf8, 0xef, 0x25, 0xb3, 0x89, 0x96, 0xde, 0xde, 0x9b, 0xb7, 0x7c, 0xfb, 0x66,
	0x00, 0x3e, 0xb8, 0xa2, 0xb2, 0x71, 0x1c, 0x18, 0xb3, 0x4e, 0xab, 0x67, 0x18, 0x6b, 0xfa, 0x6a,
	0xc9, 0x07, 0xbc, 0x84, 0xfc, 0xd5, 0x3a, 0x1f, 0x36, 0x66, 0x4f, 0xc5, 0x68, 0x39, 0x5a, 0xe5,
	0xfa, 0x7f, 0x80, 0x0b, 0x98, 0xd4, 0xa6, 0x0f, 0x13, 0x09, 0xff, 0x3c, 0x16, 0x30, 0xae, 0xed,
	0xde, 0x86, 0x47, 0x2e, 0x52, 0x89, 0x06, 0xab, 0x1e, 0x60, 0xa2, 0xc9, 0x37, 0xfc, 0xe9, 0x09,
	0x11, 0xb2, 0xf0, 0xd3, 0x0c, 0x68, 0xd1, 0x78, 0x0d, 0xa7, 0xdf, 0xa6, 0x6e, 0x23, 0x72, 0xba,
	0xbe, 0x28, 0xa5, 0xe0, 0xdd, 0x7b, 0xbb, 0xad, 0x36, 0xec, 0x9c, 0xf5, 0xf7, 0x5c, 0x91, 0x8e,
	0x6f, 0xd4, 0x13, 0x9c, 0x1f, 0x25, 0x38, 0x87, 0xc4, 0xee, 0x84, 0x38, 0xd3, 0x89, 0xdd, 0x75,
	0x7f, 0x74, 0x84, 0xbe, 0xa1, 0x68, 0xbc, 0x02, 0xd8, 0x9a, 0x40, 0x6f, 0xec, 0x2c, 0xf9, 0x22,
	0x5d, 0xa6, 0xab, 0x5c, 0x1f, 0x4c, 0xd6, 0xb7, 0x90, 0x09, 0xab, 0x84, 0xe9, 0x01, 0x1e, 0x67,
	0xb1, 0x4b, 0x7f, 0x9d, 0xc5, 0x7c, 0xb0, 0x71, 0x1b, 0x75, 0xf2, 0x72, 0x26, 0x77, 0xbc, 0xf9,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x9c, 0x3d, 0x7d, 0x55, 0x01, 0x00, 0x00,
}
